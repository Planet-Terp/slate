---
title: XKCD v1.0.0
language_tabs:
  - shell: Shell
  - http: HTTP
  - javascript: JavaScript
  - ruby: Ruby
  - python: Python
  - php: PHP
  - java: Java
  - go: Go
toc_footers:
  - <a href="https://xkcd.com/json.html">External documentation</a>
includes: []
search: true
highlight_theme: darkula
headingLevel: 2

---

<!-- Generator: Widdershins v4.0.1 -->

<h1 id="xkcd">XKCD v1.0.0</h1>

> Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu.

Webcomic of romance, sarcasm, math, and language.

Base URLs:

* <a href="http://xkcd.com/">http://xkcd.com/</a>

<h1 id="xkcd-default">Default</h1>

## get__info.0.json

> Code samples

```shell
# You can also use wget
curl -X GET http://xkcd.com/info.0.json \
  -H 'Accept: */*'

```

```http
GET http://xkcd.com/info.0.json HTTP/1.1
Host: xkcd.com
Accept: */*

```

```javascript

const headers = {
  'Accept':'*/*'
};

fetch('http://xkcd.com/info.0.json',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*'
}

result = RestClient.get 'http://xkcd.com/info.0.json',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*'
}

r = requests.get('http://xkcd.com/info.0.json', headers = headers)

print(r.json())

```

```php
<?php

require 'vendor/autoload.php';

$headers = array(
    'Accept' => '*/*',
);

$client = new \GuzzleHttp\Client();

// Define array of request body.
$request_body = array();

try {
    $response = $client->request('GET','http://xkcd.com/info.0.json', array(
        'headers' => $headers,
        'json' => $request_body,
       )
    );
    print_r($response->getBody()->getContents());
 }
 catch (\GuzzleHttp\Exception\BadResponseException $e) {
    // handle exception or api errors.
    print_r($e->getMessage());
 }

 // ...

```

```java
URL obj = new URL("http://xkcd.com/info.0.json");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "http://xkcd.com/info.0.json", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /info.0.json`

Fetch current comic and metadata.

> Example responses

> 200 Response

<h3 id="get__info.0.json-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|[comic](#schemacomic)|

<aside class="success">
This operation does not require authentication
</aside>

## get__{comicId}_info.0.json

> Code samples

```shell
# You can also use wget
curl -X GET http://xkcd.com/{comicId}/info.0.json \
  -H 'Accept: */*'

```

```http
GET http://xkcd.com/{comicId}/info.0.json HTTP/1.1
Host: xkcd.com
Accept: */*

```

```javascript

const headers = {
  'Accept':'*/*'
};

fetch('http://xkcd.com/{comicId}/info.0.json',
{
  method: 'GET',

  headers: headers
})
.then(function(res) {
    return res.json();
}).then(function(body) {
    console.log(body);
});

```

```ruby
require 'rest-client'
require 'json'

headers = {
  'Accept' => '*/*'
}

result = RestClient.get 'http://xkcd.com/{comicId}/info.0.json',
  params: {
  }, headers: headers

p JSON.parse(result)

```

```python
import requests
headers = {
  'Accept': '*/*'
}

r = requests.get('http://xkcd.com/{comicId}/info.0.json', headers = headers)

print(r.json())

```

```php
<?php

require 'vendor/autoload.php';

$headers = array(
    'Accept' => '*/*',
);

$client = new \GuzzleHttp\Client();

// Define array of request body.
$request_body = array();

try {
    $response = $client->request('GET','http://xkcd.com/{comicId}/info.0.json', array(
        'headers' => $headers,
        'json' => $request_body,
       )
    );
    print_r($response->getBody()->getContents());
 }
 catch (\GuzzleHttp\Exception\BadResponseException $e) {
    // handle exception or api errors.
    print_r($e->getMessage());
 }

 // ...

```

```java
URL obj = new URL("http://xkcd.com/{comicId}/info.0.json");
HttpURLConnection con = (HttpURLConnection) obj.openConnection();
con.setRequestMethod("GET");
int responseCode = con.getResponseCode();
BufferedReader in = new BufferedReader(
    new InputStreamReader(con.getInputStream()));
String inputLine;
StringBuffer response = new StringBuffer();
while ((inputLine = in.readLine()) != null) {
    response.append(inputLine);
}
in.close();
System.out.println(response.toString());

```

```go
package main

import (
       "bytes"
       "net/http"
)

func main() {

    headers := map[string][]string{
        "Accept": []string{"*/*"},
    }

    data := bytes.NewBuffer([]byte{jsonReq})
    req, err := http.NewRequest("GET", "http://xkcd.com/{comicId}/info.0.json", data)
    req.Header = headers

    client := &http.Client{}
    resp, err := client.Do(req)
    // ...
}

```

`GET /{comicId}/info.0.json`

Fetch comics and metadata  by comic id.

<h3 id="get__{comicid}_info.0.json-parameters">Parameters</h3>

|Name|In|Type|Required|Description|
|---|---|---|---|---|
|comicId|path|number|true|none|

> Example responses

> 200 Response

<h3 id="get__{comicid}_info.0.json-responses">Responses</h3>

|Status|Meaning|Description|Schema|
|---|---|---|---|
|200|[OK](https://tools.ietf.org/html/rfc7231#section-6.3.1)|OK|[comic](#schemacomic)|

<aside class="success">
This operation does not require authentication
</aside>

# Schemas

<h2 id="tocS_comic">comic</h2>
<!-- backwards compatibility -->
<a id="schemacomic"></a>
<a id="schema_comic"></a>
<a id="tocScomic"></a>
<a id="tocscomic"></a>

```json
{
  "alt": "string",
  "day": "string",
  "img": "string",
  "link": "string",
  "month": "string",
  "news": "string",
  "num": 0,
  "safe_title": "string",
  "title": "string",
  "transcript": "string",
  "year": "string"
}

```

### Properties

|Name|Type|Required|Restrictions|Description|
|---|---|---|---|---|
|alt|string|false|none|none|
|day|string|false|none|none|
|img|string|false|none|none|
|link|string|false|none|none|
|month|string|false|none|none|
|news|string|false|none|none|
|num|number|false|none|none|
|safe_title|string|false|none|none|
|title|string|false|none|none|
|transcript|string|false|none|none|
|year|string|false|none|none|

